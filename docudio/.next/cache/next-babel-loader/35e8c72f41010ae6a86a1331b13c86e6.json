{"ast":null,"code":"import { requests } from '../../agent';\nvar port = window.location.port === '3001' ? '3000' : '443';\nvar protocol = window.location.port === '3001' ? 'http' : 'https';\nvar API_ROOT = protocol + '://' + window.location.hostname + ':' + port;\nvar ROOT_AUTH_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2';\nvar TRUSTED_CLAIMS_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2/tokeninfo';\nvar USER_ROOT = '/api/docudio/v1/groups/';\nvar USER_SEARCH_ROOT = '/api/docudio/v1/ldap/users'; // Used strictly for local development and reverse proxying requests\n\nvar portlocal = window.location.port === '3001' ? '3000' : '443';\nvar NGINX_API_ROOT = window.location.protocol + '//' + window.location.hostname + ':' + portlocal;\nvar AUTH_PARMS = {\n  client_id: '',\n  redirect_uri: window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/auth',\n  code_challenge_method: 'S256',\n  response_type: 'code',\n  scope: ''\n};\nvar User = {\n  getUser: function getUser(options) {\n    return requests.get(\"\".concat(NGINX_API_ROOT).concat(USER_ROOT).concat(options.user, \"/isValid\"), options);\n  },\n  userSearch: function userSearch(options) {\n    return requests.get(\"\".concat(NGINX_API_ROOT).concat(USER_SEARCH_ROOT).concat(options.user), options);\n  }\n};\nexport default {\n  User: User\n};","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/api/users/agent.js"],"names":["requests","port","window","location","protocol","API_ROOT","hostname","ROOT_AUTH_URI","process","env","REACT_APP_APIGW","TRUSTED_CLAIMS_URI","USER_ROOT","USER_SEARCH_ROOT","portlocal","NGINX_API_ROOT","AUTH_PARMS","client_id","redirect_uri","code_challenge_method","response_type","scope","User","getUser","options","get","user","userSearch"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACE,IAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBF,IAAhB,KAAyB,MAAzB,GAAkC,MAAlC,GAA2C,KAAxD;AACF,IAAMG,QAAQ,GAAGF,MAAM,CAACC,QAAP,CAAgBF,IAAhB,KAAyB,MAAzB,GAAkC,MAAlC,GAA2C,OAA5D;AACC,IAAMI,QAAQ,GAAGD,QAAQ,GAAG,KAAX,GAAmBF,MAAM,CAACC,QAAP,CAAgBG,QAAnC,GAA8C,GAA9C,GAAoDL,IAArE;AACA,IAAMM,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAZ,GAA8B,gBAApD;AACA,IAAMC,kBAAkB,GAAGH,OAAO,CAACC,GAAR,CAAYC,eAAZ,GAA8B,0BAAzD;AACA,IAAME,SAAS,GAAG,yBAAlB;AACA,IAAMC,gBAAgB,GAAG,4BAAzB,C,CACD;;AACA,IAAMC,SAAS,GAAGZ,MAAM,CAACC,QAAP,CAAgBF,IAAhB,KAAyB,MAAzB,GAAkC,MAAlC,GAA2C,KAA7D;AACC,IAAMc,cAAc,GAAGb,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA2B,IAA3B,GAAkCF,MAAM,CAACC,QAAP,CAAgBG,QAAlD,GAA6D,GAA7D,GAAmEQ,SAA1F;AACA,IAAME,UAAU,GAAG;AAClBC,EAAAA,SAAS,EAAE,EADO;AAElBC,EAAAA,YAAY,EAAEhB,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA2B,IAA3B,GAAkCF,MAAM,CAACC,QAAP,CAAgBG,QAAlD,GAA6D,GAA7D,GAAmEJ,MAAM,CAACC,QAAP,CAAgBF,IAAnF,GAA0F,OAFtF;AAGlBkB,EAAAA,qBAAqB,EAAE,MAHL;AAIlBC,EAAAA,aAAa,EAAE,MAJG;AAKlBC,EAAAA,KAAK,EAAE;AALW,CAAnB;AAQD,IAAMC,IAAI,GAAG;AACXC,EAAAA,OAAO,EAAE,iBAACC,OAAD;AAAA,WAAaxB,QAAQ,CAACyB,GAAT,WAAgBV,cAAhB,SAAiCH,SAAjC,SAA6CY,OAAO,CAACE,IAArD,eAAqEF,OAArE,CAAb;AAAA,GADE;AAEXG,EAAAA,UAAU,EAAE,oBAACH,OAAD;AAAA,WAAaxB,QAAQ,CAACyB,GAAT,WAAgBV,cAAhB,SAAiCF,gBAAjC,SAAoDW,OAAO,CAACE,IAA5D,GAAoEF,OAApE,CAAb;AAAA;AAFD,CAAb;AAKA,eAAe;AACbF,EAAAA,IAAI,EAAJA;AADa,CAAf","sourcesContent":["import { requests } from '../../agent'\n  const port = window.location.port === '3001' ? '3000' : '443'\nconst protocol = window.location.port === '3001' ? 'http' : 'https'\n const API_ROOT = protocol + '://' + window.location.hostname + ':' + port\n const ROOT_AUTH_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2'\n const TRUSTED_CLAIMS_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2/tokeninfo'\n const USER_ROOT = '/api/docudio/v1/groups/'\n const USER_SEARCH_ROOT = '/api/docudio/v1/ldap/users'\n// Used strictly for local development and reverse proxying requests\nconst portlocal = window.location.port === '3001' ? '3000' : '443'\n const NGINX_API_ROOT = window.location.protocol + '//' + window.location.hostname + ':' + portlocal\n const AUTH_PARMS = {\n  client_id: '',\n  redirect_uri: window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/auth',\n  code_challenge_method: 'S256',\n  response_type: 'code',\n  scope: ''\n}\n\nconst User = {\n  getUser: (options) => requests.get(`${NGINX_API_ROOT}${USER_ROOT}${options.user}/isValid`, options),\n  userSearch: (options) => requests.get(`${NGINX_API_ROOT}${USER_SEARCH_ROOT}${options.user}`, options)\n}\n\nexport default {\n  User\n}\n"]},"metadata":{},"sourceType":"module"}