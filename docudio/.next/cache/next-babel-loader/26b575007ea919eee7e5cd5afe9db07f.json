{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { requests } from '../agent';\nvar port = process.env.port === '3001' ? '3000' : '443';\nvar protocol = process.env.port === '3001' ? 'http' : 'https';\nvar API_ROOT = protocol + '://' + process.env.hostname + ':' + port;\nvar ROOT_AUTH_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2';\nvar TRUSTED_CLAIMS_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2/tokeninfo';\nvar USER_ROOT = '/api/docudio/v1/groups/';\nvar USER_SEARCH_ROOT = '/api/docudio/v1/ldap/users'; // Used strictly for local development and reverse proxying requests\n\nvar portlocal = process.env.port === '3001' ? '3000' : '443';\nvar NGINX_API_ROOT = process.env.protocol + '//' + process.env.hostname + ':' + portlocal;\nvar AUTH_PARMS = {\n  client_id: '',\n  redirect_uri: process.env.protocol + '//' + process.env.hostname + ':' + process.env.port + '/auth',\n  code_challenge_method: 'S256',\n  response_type: 'code',\n  scope: ''\n};\nvar authPostHeaders = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\nvar Auth = {\n  getAccessToken: function getAccessToken(data) {\n    return requests.post(\"\".concat(ROOT_AUTH_URI, \"/token?client_id=\").concat(AUTH_PARMS.client_id, \"&redirect_uri=\").concat(AUTH_PARMS.redirect_uri, \"&code_verifier=\").concat(pkceValues.verifier, \"&code=\").concat(data.code, \"&grant_type=authorization_code&state=\").concat(JSON.stringify(data.from)), {\n      headers: authPostHeaders\n    });\n  },\n  refreshAccessToken: function refreshAccessToken(refreshToken) {\n    return requests.post(\"\".concat(ROOT_AUTH_URI, \"/token?grant_type=refresh_token&client_id=\").concat(AUTH_PARMS.client_id, \"&refresh_token=\").concat(refreshToken, \"&redirect_uri=\").concat(AUTH_PARMS.redirect_uri), {\n      headers: authPostHeaders\n    });\n  },\n  clearSession: function clearSession(token) {\n    return requests.post(\"\".concat(ROOT_AUTH_URI, \"/token/revoke?client_id=\").concat(AUTH_PARMS.client_id, \"&token_type_hint=access_token&token=\").concat(token), {\n      headers: _objectSpread(_objectSpread({}, authPostHeaders), {}, {\n        Authorization: ''\n      }),\n      credentials: 'include'\n    });\n  },\n  getTokenInfo: function getTokenInfo(options) {\n    return requests.get(\"\".concat(ROOT_AUTH_URI, \"/tokenInfo\"), options);\n  },\n  getTrustedClaims: function getTrustedClaims(options) {\n    return requests.get(\"\".concat(TRUSTED_CLAIMS_URI), options);\n  }\n};\nexport default {\n  Auth: Auth\n};","map":null,"metadata":{},"sourceType":"module"}