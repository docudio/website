{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect } from 'react';\nimport { MakeStore, createWrapper } from 'next-redux-wrapper';\nimport combineReducers from '../reducers/reducer';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas/root-saga';\nimport { SnackbarProvider } from 'notistack';\nimport '../utils/index.css';\nimport Notifier from '../utils/Notifier'; // import apm from '../utils/rum'\n\nimport '../utils/App.css';\nimport Head from 'next/head';\nimport { ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Link from '@material-ui/core/Link';\nimport { Grid, IconButton, CssBaseline, Button, Avatar } from '@material-ui/core';\nimport clsx from 'clsx';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport PageLinks from '../utils/PageLinks';\nimport { loadApp } from '../actions';\nimport DarkModeToggle from '../utils/DarkModeToggle';\nvar drawerWidth = 240;\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex'\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0\n    },\n    drawerPaper: {\n      width: drawerWidth\n    },\n    content: {\n      flexGrow: 1\n    },\n    body: {\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: '90vh'\n    },\n    copyright: {\n      marginTop: 'auto'\n    },\n    title: {\n      flexGrow: 1\n    },\n    small: {\n      width: theme.spacing(3),\n      height: theme.spacing(3)\n    },\n    large: {\n      width: theme.spacing(7),\n      height: theme.spacing(7)\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar\n  };\n});\n\nfunction Copyright() {\n  return /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    align: \"center\"\n  }, 'Copyright Â© ', /*#__PURE__*/React.createElement(Link, {\n    color: \"inherit\",\n    href: \"https://www.docudio.com/\"\n  }, \"Docudio\"), ' ', new Date().getFullYear(), '.');\n}\n\nfunction WrappedApp(props) {\n  var classes = useStyles();\n  var dispatch = useDispatch();\n  var appLoaded = true;\n  useEffect(function () {\n    if (!appLoaded) {\n      dispatch(loadApp());\n    }\n  }, [dispatch, appLoaded]);\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var handleDrawerOpen = function handleDrawerOpen() {\n    setOpen(true);\n  };\n\n  var handleDrawerClose = function handleDrawerClose() {\n    setOpen(false);\n  };\n\n  var Component = props.Component,\n      pageProps = props.pageProps;\n  var ThemePreference = useSelector(function (state) {\n    return state.theme.preferred;\n  });\n  var theme = React.useMemo(function () {\n    return createMuiTheme({\n      palette: {\n        type: ThemePreference === true ? 'dark' : 'light',\n        primary: {\n          main: '#000000'\n        },\n        secondary: {\n          main: '#dbdbdb'\n        }\n      },\n      typography: {\n        fontFamily: ['Montserrat'].join(',')\n      }\n    });\n  }, [ThemePreference]);\n  React.useEffect(function () {\n    // Remove the server-side injected CSS.\n    var jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n  theme.typography.subtitle1 = {\n    'font-family': ['Hammersmith One', 'sans-serif']\n  };\n  theme.typography.subtitle2 = {\n    'font-family': ['Hammersmith One', 'sans-serif']\n  };\n  var notistackRef = /*#__PURE__*/React.createRef();\n\n  var onClickDismiss = function onClickDismiss(key) {\n    return function () {\n      notistackRef.current.closeSnackbar(key);\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Head, null, /*#__PURE__*/React.createElement(\"title\", null, \"Docudio\"), /*#__PURE__*/React.createElement(\"script\", {\n    src: \"/env.js\"\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n  })), /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(SnackbarProvider, {\n    ref: notistackRef,\n    action: function action(key) {\n      return /*#__PURE__*/React.createElement(Button, {\n        onClick: onClickDismiss(key)\n      }, \"Dismiss\");\n    },\n    maxSnack: 3\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root\n  }, /*#__PURE__*/React.createElement(CssBaseline, null), /*#__PURE__*/React.createElement(AppBar, {\n    position: \"fixed\",\n    className: classes.appBar\n  }, /*#__PURE__*/React.createElement(Toolbar, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 4\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xl: 2,\n    sm: 2,\n    md: 2,\n    lg: 2\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    onClick: handleDrawerOpen,\n    edge: \"start\",\n    className: clsx(classes.menuButton, open && classes.hide)\n  }, /*#__PURE__*/React.createElement(MenuIcon, null))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xl: 6,\n    sm: 6,\n    md: 6,\n    lg: 6\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"large\",\n    className: classes.large,\n    startIcon: /*#__PURE__*/React.createElement(Avatar, {\n      className: classes.large,\n      src: \"/logo2.png\"\n    }),\n    variant: \"contained\",\n    color: \"primary\"\n  }, \" \", /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\"\n  }, \" Docudio \"), \" \"), \"         \"), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xl: 4,\n    sm: 4,\n    md: 4,\n    lg: 4\n  }, /*#__PURE__*/React.createElement(DarkModeToggle, null))))), /*#__PURE__*/React.createElement(Drawer, {\n    variant: \"persistent\",\n    open: open,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    className: classes.drawer\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.drawerHeader\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: handleDrawerClose\n  }, /*#__PURE__*/React.createElement(ChevronLeftIcon, null))), /*#__PURE__*/React.createElement(PageLinks, null), /*#__PURE__*/React.createElement(Divider, null)), /*#__PURE__*/React.createElement(\"main\", {\n    className: classes.content\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar\n  }), /*#__PURE__*/React.createElement(Component, pageProps), /*#__PURE__*/React.createElement(Notifier, null), /*#__PURE__*/React.createElement(\"footer\", {\n    className: classes.copyright\n  }, /*#__PURE__*/React.createElement(Box, {\n    pt: 4\n  }, /*#__PURE__*/React.createElement(Copyright, null))))))));\n}\n\nexport var makeStore = function makeStore() {\n  // 1: Create the middleware\n  var sagaMiddleware = createSagaMiddleware();\n  var storeEnhancers = compose; // 2: Add an extra parameter for applying middleware:\n\n  var store = createStore(combineReducers, storeEnhancers(applyMiddleware(sagaMiddleware))); // 3: Run your sagas on server\n\n  sagaMiddleware.run(rootSaga); // 4: now return the store:\n\n  return store;\n};\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});\nexport default wrapper.withRedux(WrappedApp); // makeStore function that returns a new store for every request\n// apm.setInitialPageLoadName('Docudio Landing Page')","map":null,"metadata":{},"sourceType":"module"}