{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(watcherSaga);\n\nimport { takeEvery, takeLeading } from 'redux-saga/effects';\nimport { API_ERRORED, APP_LOAD } from '../../actions';\nimport app from './app';\nimport { ACCESS_TOKEN_REQUEST, LOGOUT_REQUEST, TOKEN_INFO_REQUEST, TRUSTED_CLAIMS_SUCCESS } from '../../actions/auth';\nimport { THEME_UPDATE } from '../../actions/theme';\nimport auth from './auth';\nimport { setDarkModePreference } from '../utils';\nexport default function watcherSaga() {\n  return _regeneratorRuntime.wrap(function watcherSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(API_ERRORED, app.sendErrorMessage);\n\n        case 2:\n          _context.next = 4;\n          return takeLeading(APP_LOAD, app.handleAppLoad);\n\n        case 4:\n          _context.next = 6;\n          return takeLeading(ACCESS_TOKEN_REQUEST, auth.fetchAccessToken);\n\n        case 6:\n          _context.next = 8;\n          return takeEvery(LOGOUT_REQUEST, auth.clearSession);\n\n        case 8:\n          _context.next = 10;\n          return takeEvery(THEME_UPDATE, setDarkModePreference);\n\n        case 10:\n          _context.next = 12;\n          return takeLeading(TOKEN_INFO_REQUEST, auth.fetchTokenInfo);\n\n        case 12:\n          _context.next = 14;\n          return takeLeading(TRUSTED_CLAIMS_SUCCESS, auth.fetchAuthUserDetails);\n\n        case 14:\n          _context.next = 16;\n          return takeLeading(TRUSTED_CLAIMS_SUCCESS, auth.fetchEmployeeType);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/app/app-saga.js"],"names":["watcherSaga","takeEvery","takeLeading","API_ERRORED","APP_LOAD","app","ACCESS_TOKEN_REQUEST","LOGOUT_REQUEST","TOKEN_INFO_REQUEST","TRUSTED_CLAIMS_SUCCESS","THEME_UPDATE","auth","setDarkModePreference","sendErrorMessage","handleAppLoad","fetchAccessToken","clearSession","fetchTokenInfo","fetchAuthUserDetails","fetchEmployeeType"],"mappings":";;oDAQ0BA,W;;AAR1B,SAASC,SAAT,EAAoBC,WAApB,QAAuC,oBAAvC;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,eAAtC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,oBAAT,EAA+BC,cAA/B,EAA+CC,kBAA/C,EAAmEC,sBAAnE,QAAiG,oBAAjG;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,qBAAT,QAAsC,UAAtC;AAEA,eAAe,SAAWZ,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,SAAS,CAACE,WAAD,EAAcE,GAAG,CAACQ,gBAAlB,CAAf;;AADa;AAAA;AAEb,iBAAMX,WAAW,CAACE,QAAD,EAAWC,GAAG,CAACS,aAAf,CAAjB;;AAFa;AAAA;AAGb,iBAAMZ,WAAW,CAACI,oBAAD,EAAuBK,IAAI,CAACI,gBAA5B,CAAjB;;AAHa;AAAA;AAIb,iBAAMd,SAAS,CAACM,cAAD,EAAiBI,IAAI,CAACK,YAAtB,CAAf;;AAJa;AAAA;AAKb,iBAAMf,SAAS,CAACS,YAAD,EAAeE,qBAAf,CAAf;;AALa;AAAA;AAMb,iBAAMV,WAAW,CAACM,kBAAD,EAAqBG,IAAI,CAACM,cAA1B,CAAjB;;AANa;AAAA;AAOb,iBAAMf,WAAW,CAACO,sBAAD,EAAyBE,IAAI,CAACO,oBAA9B,CAAjB;;AAPa;AAAA;AAQb,iBAAMhB,WAAW,CAACO,sBAAD,EAAyBE,IAAI,CAACQ,iBAA9B,CAAjB;;AARa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, takeLeading } from 'redux-saga/effects'\nimport { API_ERRORED, APP_LOAD } from '../../actions'\nimport app from './app'\nimport { ACCESS_TOKEN_REQUEST, LOGOUT_REQUEST, TOKEN_INFO_REQUEST, TRUSTED_CLAIMS_SUCCESS } from '../../actions/auth'\nimport { THEME_UPDATE } from '../../actions/theme'\nimport auth from './auth'\nimport { setDarkModePreference } from '../utils'\n\nexport default function * watcherSaga () {\n  yield takeEvery(API_ERRORED, app.sendErrorMessage)\n  yield takeLeading(APP_LOAD, app.handleAppLoad)\n  yield takeLeading(ACCESS_TOKEN_REQUEST, auth.fetchAccessToken)\n  yield takeEvery(LOGOUT_REQUEST, auth.clearSession)\n  yield takeEvery(THEME_UPDATE, setDarkModePreference)\n  yield takeLeading(TOKEN_INFO_REQUEST, auth.fetchTokenInfo)\n  yield takeLeading(TRUSTED_CLAIMS_SUCCESS, auth.fetchAuthUserDetails)\n  yield takeLeading(TRUSTED_CLAIMS_SUCCESS, auth.fetchEmployeeType)\n}\n"]},"metadata":{},"sourceType":"module"}