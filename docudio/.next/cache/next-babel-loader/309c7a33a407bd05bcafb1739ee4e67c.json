{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction handleResponse(response) {\n  if (response.status === 204) {\n    return response.text().then(function (text) {\n      return {\n        headers: response.headers,\n        data: text\n      };\n    });\n  }\n\n  if (response.status === 302) {\n    return response.json().then(function (json) {\n      return {\n        headers: response.headers,\n        data: json\n      };\n    });\n  }\n\n  var contentType = response.headers.get('content-type');\n\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    return response.json().then(function (json) {\n      if (!response.ok) {\n        var error = Object.assign({}, json, {\n          status: response.status,\n          message: response.statusText\n        });\n        return Promise.reject(error);\n      }\n\n      return {\n        headers: response.headers,\n        data: json\n      };\n    });\n  }\n\n  return response.text().then(function (text) {\n    if (!response.ok) {\n      var error = Object.assign({}, {\n        status: response.status,\n        message: response.statusText,\n        data: text\n      });\n      return Promise.reject(error);\n    }\n\n    return {\n      headers: response.headers,\n      data: text\n    };\n  });\n}\n\nfunction handleResponsenonJson(response) {\n  return response.text().then(function (text) {\n    if (!response.ok) {\n      var error = Object.assign({}, {\n        status: response.status,\n        message: response.statusText\n      });\n      var contentType = response.headers.get('content-type');\n\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        error = _objectSpread(_objectSpread({}, error), {}, {\n          text: text\n        });\n      }\n\n      return Promise.reject(error);\n    }\n\n    return {\n      headers: response.headers,\n      data: text\n    };\n  });\n}\n\nexport var requests = {\n  del: function del(url, options) {\n    return fetch(\"\".concat(url), _objectSpread({\n      method: 'DELETE'\n    }, options)).then(handleResponse);\n  },\n  get: function get(url, options) {\n    return fetch(\"\".concat(url), _objectSpread({\n      method: 'GET'\n    }, options)).then(handleResponse);\n  },\n  put: function put(url, options, body) {\n    return fetch(\"\".concat(url), _objectSpread(_objectSpread({\n      method: 'PUT'\n    }, options), {}, {\n      body: JSON.stringify(body)\n    })).then(handleResponse);\n  },\n  putprops: function putprops(url, options) {\n    return fetch(\"\".concat(url), _objectSpread({\n      method: 'PUT'\n    }, options)).then(handleResponsenonJson);\n  },\n  post: function post(url, options, body) {\n    return fetch(\"\".concat(url), _objectSpread(_objectSpread({\n      method: 'POST'\n    }, options), {}, {\n      body: JSON.stringify(body)\n    })).then(handleResponse);\n  },\n  postprops: function postprops(url, options) {\n    return fetch(\"\".concat(url), _objectSpread({\n      method: 'POST'\n    }, options)).then(handleResponse);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}