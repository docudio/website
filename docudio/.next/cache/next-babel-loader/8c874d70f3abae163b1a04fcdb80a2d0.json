{"ast":null,"code":"import crypto from 'crypto';\n\nfunction base64URLEncode(str) {\n  return str.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction sha256(buffer) {\n  return crypto.createHash('sha256').update(buffer).digest();\n}\n\nexport var generatePkceValues = function generatePkceValues() {\n  if (getPkceValues()) {\n    return getPkceValues();\n  }\n\n  var verifier = base64URLEncode(crypto.randomBytes(32));\n  var challenge = base64URLEncode(sha256(verifier));\n  return {\n    verifier: verifier,\n    challenge: challenge\n  };\n};\n{\n  /*\n  export const getPkceValues = () => {\n  return sessionStorage.getItem('pkceValues')\n    ? JSON.parse(sessionStorage.getItem('pkceValues'))\n    : undefined\n  }\n  export const setPkceValues = pkceValues => {\n  sessionStorage.setItem('pkceValues', JSON.stringify(pkceValues))\n  }\n  export const removePkceValues = () => {\n  sessionStorage.removeItem('pkceValues')\n  }\n  */\n}\nexport var getAuthToken = function getAuthToken() {\n  return localStorage.getItem('authToken') ? JSON.parse(localStorage.getItem('authToken')) : undefined;\n};\nexport var getDarkModePreference = function getDarkModePreference() {\n  return localStorage.getItem('DarkModePreferred') ? localStorage.getItem('DarkModePreferred') : false;\n};\nexport var setDarkModePreference = function setDarkModePreference(preference) {\n  localStorage.setItem('DarkModePreferred', preference.payload);\n};\nexport var setAuthToken = function setAuthToken(token) {\n  localStorage.setItem('authToken', JSON.stringify(token));\n};\nexport var removeAuthToken = function removeAuthToken() {\n  localStorage.removeItem('authToken');\n};\nexport var getAuthorizationHeader = function getAuthorizationHeader(accessToken) {\n  return {\n    Authorization: \"Bearer \".concat(accessToken)\n  };\n};\nexport var decodeTrustedClaims = function decodeTrustedClaims(trustedClaims) {\n  var encodedTrustedClaims = trustedClaims.replace('Authorization: TrustedClaims', '').trim();\n  var decodedTrustedClaims = Buffer.from(encodedTrustedClaims, 'base64').toString();\n  return JSON.parse(decodedTrustedClaims);\n};","map":null,"metadata":{},"sourceType":"module"}