{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction handleResponse(response) {\n  if (response.status === 204) {\n    return response.text().then(function (text) {\n      return {\n        headers: response.headers,\n        data: text\n      };\n    });\n  }\n\n  if (response.status === 302) {\n    return response.json().then(function (json) {\n      return {\n        headers: response.headers,\n        data: json\n      };\n    });\n  }\n\n  var contentType = response.headers.get('content-type');\n\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    return response.json().then(function (json) {\n      if (!response.ok) {\n        var error = Object.assign({}, json, {\n          status: response.status,\n          message: response.statusText\n        });\n        return Promise.reject(error);\n      }\n\n      return {\n        headers: response.headers,\n        data: json\n      };\n    });\n  }\n\n  return response.text().then(function (text) {\n    if (!response.ok) {\n      var error = Object.assign({}, {\n        status: response.status,\n        message: response.statusText,\n        data: text\n      });\n      return Promise.reject(error);\n    }\n\n    return {\n      headers: response.headers,\n      data: text\n    };\n  });\n}\n\nfunction handleResponsenonJson(response) {\n  return response.text().then(function (text) {\n    if (!response.ok) {\n      var error = Object.assign({}, {\n        status: response.status,\n        message: response.statusText\n      });\n      var contentType = response.headers.get('content-type');\n\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        error = _objectSpread(_objectSpread({}, error), {}, {\n          text: text\n        });\n      }\n\n      return Promise.reject(error);\n    }\n\n    return {\n      headers: response.headers,\n      data: text\n    };\n  });\n}\n\nexport var requests = {\n  del: function del(url, options) {\n    return fetch(\"\".concat(url), _objectSpread({\n      method: 'DELETE'\n    }, options)).then(handleResponse);\n  },\n  get: function get(url, options) {\n    return fetch(\"\".concat(url), _objectSpread({\n      method: 'GET'\n    }, options)).then(handleResponse);\n  },\n  put: function put(url, options, body) {\n    return fetch(\"\".concat(url), _objectSpread(_objectSpread({\n      method: 'PUT'\n    }, options), {}, {\n      body: JSON.stringify(body)\n    })).then(handleResponse);\n  },\n  putprops: function putprops(url, options) {\n    return fetch(\"\".concat(url), _objectSpread({\n      method: 'PUT'\n    }, options)).then(handleResponsenonJson);\n  },\n  post: function post(url, options, body) {\n    return fetch(\"\".concat(url), _objectSpread(_objectSpread({\n      method: 'POST'\n    }, options), {}, {\n      body: JSON.stringify(body)\n    })).then(handleResponse);\n  },\n  postprops: function postprops(url, options) {\n    return fetch(\"\".concat(url), _objectSpread({\n      method: 'POST'\n    }, options)).then(handleResponse);\n  }\n};","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/agent.js"],"names":["handleResponse","response","status","text","then","headers","data","json","contentType","get","indexOf","ok","error","Object","assign","message","statusText","Promise","reject","handleResponsenonJson","requests","del","url","options","fetch","method","put","body","JSON","stringify","putprops","post","postprops"],"mappings":"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","sourcesContent":["function handleResponse (response) {\n  if (response.status === 204) {\n    return response.text().then((text) => {\n      return { headers: response.headers, data: text }\n    })\n  }\n  if (response.status === 302) {\n    return response.json().then((json) => {\n      return { headers: response.headers, data: json }\n    })\n  }\n  const contentType = response.headers.get('content-type')\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    return response.json().then((json) => {\n      if (!response.ok) {\n        const error = Object.assign({}, json, {\n          status: response.status,\n          message: response.statusText\n        })\n        return Promise.reject(error)\n      }\n      return { headers: response.headers, data: json }\n    })\n  }\n\n  return response.text().then((text) => {\n    if (!response.ok) {\n      const error = Object.assign({}, {\n        status: response.status,\n        message: response.statusText,\n        data: text\n      })\n      return Promise.reject(error)\n    }\n    return { headers: response.headers, data: text }\n  })\n}\n\nfunction handleResponsenonJson (response) {\n  return response.text()\n    .then((text) => {\n      if (!response.ok) {\n        let error = Object.assign({}, {\n          status: response.status,\n          message: response.statusText\n        })\n        const contentType = response.headers.get('content-type')\n        if (contentType && contentType.indexOf('application/json') !== -1) {\n          error = { ...error, text }\n        }\n        return Promise.reject(error)\n      }\n      return { headers: response.headers, data: text }\n    })\n}\n\nexport const requests = {\n  del: (url, options) => {\n    return fetch(`${url}`, { method: 'DELETE', ...options }).then(handleResponse)\n  },\n  get: (url: String, options) => fetch(`${url}`, { method: 'GET', ...options }).then(handleResponse),\n  put: (url: String, options, body) => {\n    return fetch(`${url}`, { method: 'PUT', ...options, body: JSON.stringify(body) }).then(handleResponse)\n  },\n  putprops: (url: String, options) => {\n    return fetch(`${url}`, { method: 'PUT', ...options }).then(handleResponsenonJson)\n  },\n  post: (url: String, options, body) => {\n    return fetch(`${url}`, { method: 'POST', ...options, body: JSON.stringify(body) }).then(handleResponse)\n  },\n  postprops: (url: String, options) => {\n    return fetch(`${url}`, { method: 'POST', ...options }).then(handleResponse)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}