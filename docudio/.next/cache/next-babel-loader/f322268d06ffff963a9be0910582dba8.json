{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { requests } from '../agent';\nvar port = process.env.port === '3001' ? '3000' : '443';\nvar protocol = process.env.port === '3001' ? 'http' : 'https';\nvar API_ROOT = protocol + '://' + process.env.hostname + ':' + port;\nvar ROOT_AUTH_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2';\nvar TRUSTED_CLAIMS_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2/tokeninfo';\nvar USER_ROOT = '/api/docudio/v1/groups/';\nvar USER_SEARCH_ROOT = '/api/docudio/v1/ldap/users'; // Used strictly for local development and reverse proxying requests\n\nvar portlocal = process.env.port === '3001' ? '3000' : '443';\nvar NGINX_API_ROOT = process.env.protocol + '//' + process.env.hostname + ':' + portlocal;\nvar AUTH_PARMS = {\n  client_id: '',\n  redirect_uri: process.env.protocol + '//' + process.env.hostname + ':' + process.env.port + '/auth',\n  code_challenge_method: 'S256',\n  response_type: 'code',\n  scope: ''\n};\nvar authPostHeaders = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\nvar Auth = {\n  getAccessToken: function getAccessToken(data) {\n    return requests.post(\"\".concat(ROOT_AUTH_URI, \"/token?client_id=\").concat(AUTH_PARMS.client_id, \"&redirect_uri=\").concat(AUTH_PARMS.redirect_uri, \"&code_verifier=\").concat(pkceValues.verifier, \"&code=\").concat(data.code, \"&grant_type=authorization_code&state=\").concat(JSON.stringify(data.from)), {\n      headers: authPostHeaders\n    });\n  },\n  refreshAccessToken: function refreshAccessToken(refreshToken) {\n    return requests.post(\"\".concat(ROOT_AUTH_URI, \"/token?grant_type=refresh_token&client_id=\").concat(AUTH_PARMS.client_id, \"&refresh_token=\").concat(refreshToken, \"&redirect_uri=\").concat(AUTH_PARMS.redirect_uri), {\n      headers: authPostHeaders\n    });\n  },\n  clearSession: function clearSession(token) {\n    return requests.post(\"\".concat(ROOT_AUTH_URI, \"/token/revoke?client_id=\").concat(AUTH_PARMS.client_id, \"&token_type_hint=access_token&token=\").concat(token), {\n      headers: _objectSpread(_objectSpread({}, authPostHeaders), {}, {\n        Authorization: ''\n      }),\n      credentials: 'include'\n    });\n  },\n  getTokenInfo: function getTokenInfo(options) {\n    return requests.get(\"\".concat(ROOT_AUTH_URI, \"/tokenInfo\"), options);\n  },\n  getTrustedClaims: function getTrustedClaims(options) {\n    return requests.get(\"\".concat(TRUSTED_CLAIMS_URI), options);\n  }\n};\nexport default {\n  Auth: Auth\n};","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/app/auth-agent.js"],"names":["requests","port","process","env","protocol","API_ROOT","hostname","ROOT_AUTH_URI","REACT_APP_APIGW","TRUSTED_CLAIMS_URI","USER_ROOT","USER_SEARCH_ROOT","portlocal","NGINX_API_ROOT","AUTH_PARMS","client_id","redirect_uri","code_challenge_method","response_type","scope","authPostHeaders","Auth","getAccessToken","data","post","pkceValues","verifier","code","JSON","stringify","from","headers","refreshAccessToken","refreshToken","clearSession","token","Authorization","credentials","getTokenInfo","options","get","getTrustedClaims"],"mappings":"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","sourcesContent":["import { requests } from '../agent'\n\nconst port = process.env.port === '3001' ? '3000' : '443'\nconst protocol = process.env.port === '3001' ? 'http' : 'https'\nconst API_ROOT = protocol + '://' + process.env.hostname + ':' + port\nconst ROOT_AUTH_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2'\nconst TRUSTED_CLAIMS_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2/tokeninfo'\nconst USER_ROOT = '/api/docudio/v1/groups/'\nconst USER_SEARCH_ROOT = '/api/docudio/v1/ldap/users'\n// Used strictly for local development and reverse proxying requests\nconst portlocal = process.env.port === '3001' ? '3000' : '443'\nconst NGINX_API_ROOT = process.env.protocol + '//' + process.env.hostname + ':' + portlocal\nconst AUTH_PARMS = {\n  client_id: '',\n  redirect_uri: process.env.protocol + '//' + process.env.hostname + ':' + process.env.port + '/auth',\n  code_challenge_method: 'S256',\n  response_type: 'code',\n  scope: ''\n}\n\nconst authPostHeaders = { 'Content-Type': 'application/x-www-form-urlencoded' }\n\nconst Auth = {\n  getAccessToken: (data) => requests.post(\n    `${ROOT_AUTH_URI}/token?client_id=${AUTH_PARMS.client_id}&redirect_uri=${AUTH_PARMS.redirect_uri}&code_verifier=${pkceValues.verifier}&code=${data.code}&grant_type=authorization_code&state=${JSON.stringify(data.from)}`,\n    { headers: authPostHeaders }\n  ),\n  refreshAccessToken: (refreshToken) => requests.post(\n    `${ROOT_AUTH_URI}/token?grant_type=refresh_token&client_id=${AUTH_PARMS.client_id}&refresh_token=${refreshToken}&redirect_uri=${AUTH_PARMS.redirect_uri}`,\n    { headers: authPostHeaders }\n  ),\n  clearSession: (token) => requests.post(\n    `${ROOT_AUTH_URI}/token/revoke?client_id=${AUTH_PARMS.client_id}&token_type_hint=access_token&token=${token}`,\n    { headers: { ...authPostHeaders, Authorization: '' }, credentials: 'include' }\n  ),\n  getTokenInfo: (options) => requests.get(`${ROOT_AUTH_URI}/tokenInfo`, options),\n  getTrustedClaims: (options) => requests.get(`${TRUSTED_CLAIMS_URI}`, options)\n}\n\nexport default {\n  Auth\n}\n"]},"metadata":{},"sourceType":"module"}