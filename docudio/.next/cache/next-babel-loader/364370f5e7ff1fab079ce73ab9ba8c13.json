{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchAccessToken),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(clearSession),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(fetchUserClaims),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(fetchAuthUserDetails),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(fetchTokenInfo),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(fetchEmployeeType);\n\nimport { call, put } from 'redux-saga/effects';\nimport agent from './auth-agent';\nimport userAgent from '../api/users/agent';\nimport { ACCESS_TOKEN_SUCCESS, LOGOUT_SUCCESS, TRUSTED_CLAIMS_FAILURE, TRUSTED_CLAIMS_SUCCESS, TOKEN_INFO_REQUEST, AUTH_USER_DETAILS_SUCCESS, USER_TYPE_SEARCH_SUCCESS, USER_TYPE_SEARCH_FAILURE } from '../../actions/auth';\nimport { setAuthToken, getAuthToken, removeAuthToken, decodeTrustedClaims } from '../utils';\nimport apiCaller from '../api/api-caller';\nimport app from './app';\n\nfunction fetchAccessToken(action) {\n  var payload;\n  return _regeneratorRuntime.wrap(function fetchAccessToken$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(agent.Auth.getAccessToken, action.payload);\n\n        case 3:\n          payload = _context.sent;\n          _context.next = 6;\n          return call(setAuthToken, payload.data);\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ACCESS_TOKEN_SUCCESS,\n            payload: payload.data\n          });\n\n        case 8:\n          _context.next = 10;\n          return call(fetchUserClaims);\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return call(app.sendErrorMessage, _context.t0);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\n\nfunction clearSession() {\n  var token;\n  return _regeneratorRuntime.wrap(function clearSession$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(getAuthToken);\n\n        case 3:\n          token = _context2.sent;\n          _context2.next = 6;\n          return call(agent.Auth.clearSession, token);\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: LOGOUT_SUCCESS\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return call(app.sendErrorMessage, _context2.t0);\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction fetchUserClaims() {\n  var response, trustedClaims;\n  return _regeneratorRuntime.wrap(function fetchUserClaims$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(apiCaller, agent.Auth.getTrustedClaims, {\n            headers: {}\n          });\n\n        case 3:\n          response = _context3.sent;\n          _context3.next = 6;\n          return call(decodeTrustedClaims, response.data);\n\n        case 6:\n          trustedClaims = _context3.sent;\n          _context3.next = 9;\n          return put({\n            type: TRUSTED_CLAIMS_SUCCESS,\n            payload: trustedClaims\n          });\n\n        case 9:\n          _context3.next = 17;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 15;\n          return put({\n            type: TRUSTED_CLAIMS_FAILURE,\n            payload: _context3.t0\n          });\n\n        case 15:\n          _context3.next = 17;\n          return call(app.sendErrorMessage, _context3.t0);\n\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 11]]);\n}\n\nfunction fetchAuthUserDetails(action) {\n  var payload;\n  return _regeneratorRuntime.wrap(function fetchAuthUserDetails$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(apiCaller, userAgent.User.getUser, {\n            headers: {},\n            user: action.payload.claims.uid\n          });\n\n        case 3:\n          payload = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: AUTH_USER_DETAILS_SUCCESS,\n            payload: payload.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return call(app.sendErrorMessage, _context4.t0);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction fetchTokenInfo() {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchTokenInfo$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(apiCaller, agent.Auth.getTokenInfo, {\n            headers: {}\n          });\n\n        case 3:\n          response = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: TOKEN_INFO_REQUEST,\n            payload: response\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return call(app.sendErrorMessage, _context5.t0);\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction fetchEmployeeType() {\n  var payload;\n  return _regeneratorRuntime.wrap(function fetchEmployeeType$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(apiCaller, userAgent.User.fetchEmployeeType, {\n            headers: {}\n          });\n\n        case 3:\n          payload = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: USER_TYPE_SEARCH_SUCCESS,\n            payload: payload.data\n          });\n\n        case 6:\n          _context6.next = 14;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 12;\n          return put({\n            type: USER_TYPE_SEARCH_FAILURE,\n            payload: {}\n          });\n\n        case 12:\n          _context6.next = 14;\n          return call(app.sendErrorMessage, _context6.t0);\n\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nexport default {\n  fetchUserClaims: fetchUserClaims,\n  fetchAccessToken: fetchAccessToken,\n  fetchTokenInfo: fetchTokenInfo,\n  fetchAuthUserDetails: fetchAuthUserDetails,\n  fetchEmployeeType: fetchEmployeeType,\n  clearSession: clearSession\n};","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/app/auth.js"],"names":["fetchAccessToken","clearSession","fetchUserClaims","fetchAuthUserDetails","fetchTokenInfo","fetchEmployeeType","call","put","agent","userAgent","ACCESS_TOKEN_SUCCESS","LOGOUT_SUCCESS","TRUSTED_CLAIMS_FAILURE","TRUSTED_CLAIMS_SUCCESS","TOKEN_INFO_REQUEST","AUTH_USER_DETAILS_SUCCESS","USER_TYPE_SEARCH_SUCCESS","USER_TYPE_SEARCH_FAILURE","setAuthToken","getAuthToken","removeAuthToken","decodeTrustedClaims","apiCaller","app","action","Auth","getAccessToken","payload","data","type","sendErrorMessage","token","getTrustedClaims","headers","response","trustedClaims","User","getUser","user","claims","uid","getTokenInfo"],"mappings":"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","sourcesContent":["import { call, put } from 'redux-saga/effects'\nimport agent from './auth-agent'\nimport userAgent from '../api/users/agent'\nimport { ACCESS_TOKEN_SUCCESS, LOGOUT_SUCCESS, TRUSTED_CLAIMS_FAILURE, TRUSTED_CLAIMS_SUCCESS, TOKEN_INFO_REQUEST, AUTH_USER_DETAILS_SUCCESS, USER_TYPE_SEARCH_SUCCESS, USER_TYPE_SEARCH_FAILURE } from '../../actions/auth'\nimport { setAuthToken, getAuthToken, removeAuthToken, decodeTrustedClaims } from '../utils'\nimport apiCaller from '../api/api-caller'\nimport app from './app'\n\nfunction * fetchAccessToken (action) {\n  try {\n    const payload = yield call(agent.Auth.getAccessToken, action.payload)\n    yield call(setAuthToken, payload.data)\n    yield put({ type: ACCESS_TOKEN_SUCCESS, payload: payload.data })\n    yield call(fetchUserClaims)\n  } catch (e) {\n    yield call(app.sendErrorMessage, e)\n  }\n}\n\nfunction * clearSession () {\n  try {\n    const token = yield call(getAuthToken)\n    yield call(agent.Auth.clearSession, token)\n    yield put({ type: LOGOUT_SUCCESS })\n  } catch (e) {\n    yield call(app.sendErrorMessage, e)\n  }\n}\n\nfunction * fetchUserClaims () {\n  try {\n    const response = yield call(apiCaller, agent.Auth.getTrustedClaims, { headers: {} })\n    const trustedClaims = yield call(decodeTrustedClaims, response.data)\n    yield put({ type: TRUSTED_CLAIMS_SUCCESS, payload: trustedClaims })\n  } catch (e) {\n    yield put({ type: TRUSTED_CLAIMS_FAILURE, payload: e })\n    yield call(app.sendErrorMessage, e)\n  }\n}\n\nfunction * fetchAuthUserDetails (action) {\n  try {\n    const payload = yield call(apiCaller, userAgent.User.getUser, { headers: {}, user: action.payload.claims.uid })\n    yield put({ type: AUTH_USER_DETAILS_SUCCESS, payload: payload.data })\n  } catch (e) {\n    yield call(app.sendErrorMessage, e)\n  }\n}\n\nfunction * fetchTokenInfo () {\n  try {\n    const response = yield call(apiCaller, agent.Auth.getTokenInfo, { headers: {} })\n    yield put({ type: TOKEN_INFO_REQUEST, payload: response })\n  } catch (e) {\n    yield call(app.sendErrorMessage, e)\n  }\n}\n\nfunction * fetchEmployeeType () {\n  try {\n    const payload = yield call(apiCaller, userAgent.User.fetchEmployeeType, { headers: {} })\n    yield put({ type: USER_TYPE_SEARCH_SUCCESS, payload: payload.data })\n  } catch (e) {\n    yield put({ type: USER_TYPE_SEARCH_FAILURE, payload: {} })\n    yield call(app.sendErrorMessage, e)\n  }\n}\n\nexport default {\n  fetchUserClaims,\n  fetchAccessToken,\n  fetchTokenInfo,\n  fetchAuthUserDetails,\n  fetchEmployeeType,\n  clearSession\n}\n"]},"metadata":{},"sourceType":"module"}