{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { requests } from '../agent';\nimport { getPkceValues } from '../utils';\nvar port = window.location.port === '3001' ? '3000' : '443';\nvar protocol = window.location.port === '3001' ? 'http' : 'https';\nvar API_ROOT = protocol + '://' + window.location.hostname + ':' + port;\nvar ROOT_AUTH_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2';\nvar TRUSTED_CLAIMS_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2/tokeninfo';\nvar USER_ROOT = '/api/docudio/v1/groups/';\nvar USER_SEARCH_ROOT = '/api/docudio/v1/ldap/users'; // Used strictly for local development and reverse proxying requests\n\nvar portlocal = window.location.port === '3001' ? '3000' : '443';\nvar NGINX_API_ROOT = window.location.protocol + '//' + window.location.hostname + ':' + portlocal;\nvar AUTH_PARMS = {\n  client_id: '',\n  redirect_uri: window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/auth',\n  code_challenge_method: 'S256',\n  response_type: 'code',\n  scope: ''\n};\nvar pkceValues = getPkceValues();\nvar authPostHeaders = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\nvar Auth = {\n  getAccessToken: function getAccessToken(data) {\n    return requests.post(\"\".concat(ROOT_AUTH_URI, \"/token?client_id=\").concat(AUTH_PARMS.client_id, \"&redirect_uri=\").concat(AUTH_PARMS.redirect_uri, \"&code_verifier=\").concat(pkceValues.verifier, \"&code=\").concat(data.code, \"&grant_type=authorization_code&state=\").concat(JSON.stringify(data.from)), {\n      headers: authPostHeaders\n    });\n  },\n  refreshAccessToken: function refreshAccessToken(refreshToken) {\n    return requests.post(\"\".concat(ROOT_AUTH_URI, \"/token?grant_type=refresh_token&client_id=\").concat(AUTH_PARMS.client_id, \"&refresh_token=\").concat(refreshToken, \"&redirect_uri=\").concat(AUTH_PARMS.redirect_uri), {\n      headers: authPostHeaders\n    });\n  },\n  clearSession: function clearSession(token) {\n    return requests.post(\"\".concat(ROOT_AUTH_URI, \"/token/revoke?client_id=\").concat(AUTH_PARMS.client_id, \"&token_type_hint=access_token&token=\").concat(token), {\n      headers: _objectSpread(_objectSpread({}, authPostHeaders), {}, {\n        Authorization: ''\n      }),\n      credentials: 'include'\n    });\n  },\n  getTokenInfo: function getTokenInfo(options) {\n    return requests.get(\"\".concat(ROOT_AUTH_URI, \"/tokenInfo\"), options);\n  },\n  getTrustedClaims: function getTrustedClaims(options) {\n    return requests.get(\"\".concat(TRUSTED_CLAIMS_URI), options);\n  }\n};\nexport default {\n  Auth: Auth\n};","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/app/auth-agent.js"],"names":["requests","getPkceValues","port","window","location","protocol","API_ROOT","hostname","ROOT_AUTH_URI","process","env","REACT_APP_APIGW","TRUSTED_CLAIMS_URI","USER_ROOT","USER_SEARCH_ROOT","portlocal","NGINX_API_ROOT","AUTH_PARMS","client_id","redirect_uri","code_challenge_method","response_type","scope","pkceValues","authPostHeaders","Auth","getAccessToken","data","post","verifier","code","JSON","stringify","from","headers","refreshAccessToken","refreshToken","clearSession","token","Authorization","credentials","getTokenInfo","options","get","getTrustedClaims"],"mappings":"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","sourcesContent":["import { requests } from '../agent'\nimport { getPkceValues } from '../utils'\n  const port = window.location.port === '3001' ? '3000' : '443'\nconst protocol = window.location.port === '3001' ? 'http' : 'https'\n const API_ROOT = protocol + '://' + window.location.hostname + ':' + port\n const ROOT_AUTH_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2'\n const TRUSTED_CLAIMS_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2/tokeninfo'\n const USER_ROOT = '/api/docudio/v1/groups/'\n const USER_SEARCH_ROOT = '/api/docudio/v1/ldap/users'\n// Used strictly for local development and reverse proxying requests\nconst portlocal = window.location.port === '3001' ? '3000' : '443'\n const NGINX_API_ROOT = window.location.protocol + '//' + window.location.hostname + ':' + portlocal\n const AUTH_PARMS = {\n  client_id: '',\n  redirect_uri: window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/auth',\n  code_challenge_method: 'S256',\n  response_type: 'code',\n  scope: ''\n}\n\nconst pkceValues = getPkceValues()\nconst authPostHeaders = { 'Content-Type': 'application/x-www-form-urlencoded' }\n\nconst Auth = {\n  getAccessToken: (data) => requests.post(\n    `${ROOT_AUTH_URI}/token?client_id=${AUTH_PARMS.client_id}&redirect_uri=${AUTH_PARMS.redirect_uri}&code_verifier=${pkceValues.verifier}&code=${data.code}&grant_type=authorization_code&state=${JSON.stringify(data.from)}`,\n    { headers: authPostHeaders }\n  ),\n  refreshAccessToken: (refreshToken) => requests.post(\n    `${ROOT_AUTH_URI}/token?grant_type=refresh_token&client_id=${AUTH_PARMS.client_id}&refresh_token=${refreshToken}&redirect_uri=${AUTH_PARMS.redirect_uri}`,\n    { headers: authPostHeaders }\n  ),\n  clearSession: (token) => requests.post(\n    `${ROOT_AUTH_URI}/token/revoke?client_id=${AUTH_PARMS.client_id}&token_type_hint=access_token&token=${token}`,\n    { headers: { ...authPostHeaders, Authorization: '' }, credentials: 'include' }\n  ),\n  getTokenInfo: (options) => requests.get(`${ROOT_AUTH_URI}/tokenInfo`, options),\n  getTrustedClaims: (options) => requests.get(`${TRUSTED_CLAIMS_URI}`, options)\n}\n\nexport default {\n  Auth\n}\n"]},"metadata":{},"sourceType":"module"}