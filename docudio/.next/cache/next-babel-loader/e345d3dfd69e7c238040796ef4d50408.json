{"ast":null,"code":"import { MakeStore, createWrapper, Context } from \"next-redux-wrapper\";\nimport combineReducers from \"../reducers/reducer\";\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas/root-saga';\nimport { Store } from 'redux';\nvar initialiseSagaMiddleware = createSagaMiddleware();\nvar storeEnhancers = compose;\nexport var makeStore = function makeStore(context) {\n  // 1: Create the middleware\n  var sagaMiddleware = createSagaMiddleware();\n  var storeEnhancers = compose; // 2: Add an extra parameter for applying middleware:\n\n  var store = createStore(combineReducers, storeEnhancers(applyMiddleware(initialiseSagaMiddleware))); // 3: Run your sagas on server\n\n  sagaMiddleware.run(rootSaga); // 4: now return the store:\n\n  return store;\n};\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/store/index.js"],"names":["MakeStore","createWrapper","Context","combineReducers","createStore","applyMiddleware","compose","createSagaMiddleware","rootSaga","Store","initialiseSagaMiddleware","storeEnhancers","makeStore","context","sagaMiddleware","store","run","wrapper","debug"],"mappings":"AACA,SAASA,SAAT,EAAoBC,aAApB,EAAmCC,OAAnC,QAAkD,oBAAlD;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAAQC,KAAR,QAAoB,OAApB;AAEA,IAAMC,wBAAwB,GAAGH,oBAAoB,EAArD;AACA,IAAMI,cAAc,GAAGL,OAAvB;AAKA,OAAO,IAAMM,SAAoB,GAAG,SAAvBA,SAAuB,CAACC,OAAD,EAAsB;AACtD;AACA,MAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AACJ,MAAMI,cAAc,GAAGL,OAAvB,CAH0D,CAKtD;;AACA,MAAMS,KAAK,GAAGX,WAAW,CAACD,eAAD,EAAkBQ,cAAc,CAACN,eAAe,CAACK,wBAAD,CAAhB,CAAhC,CAAzB,CANsD,CAQtD;;AACJI,EAAAA,cAAc,CAACE,GAAf,CAAmBR,QAAnB,EAT0D,CAWtD;;AACA,SAAOO,KAAP;AACH,CAbM;AAiBP,OAAO,IAAME,OAAO,GAAGhB,aAAa,CAACW,SAAD,EAAY;AAAEM,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["\nimport { MakeStore, createWrapper, Context } from \"next-redux-wrapper\";\nimport combineReducers from \"../reducers/reducer\";\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from '../sagas/root-saga'\nimport {Store} from 'redux';\n\nconst initialiseSagaMiddleware = createSagaMiddleware()\nconst storeEnhancers = compose\nexport interface SagaStore extends Store {\n    sagaTask?: Task;\n}\n\nexport const makeStore: MakeStore = (context: Context) => {\n    // 1: Create the middleware\n    const sagaMiddleware = createSagaMiddleware();\nconst storeEnhancers = compose\n\n    // 2: Add an extra parameter for applying middleware:\n    const store = createStore(combineReducers, storeEnhancers(applyMiddleware(initialiseSagaMiddleware)));\n\n    // 3: Run your sagas on server\nsagaMiddleware.run(rootSaga)\n\n    // 4: now return the store:\n    return store;\n};\n\n\n\nexport const wrapper = createWrapper(makeStore, { debug: true });\n"]},"metadata":{},"sourceType":"module"}