{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(watcherSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(submitSignup);\n\nimport { takeLeading, takeLatest, call, put, delay } from 'redux-saga/effects';\nimport agent from './agent';\nimport { SIGNUP_REQUESTED, SIGNUP_SUCCESS, SIGNUP_FAILURE } from '../../../actions/signup';\nimport apiCaller from '../api-caller';\nimport app from '../../app/app';\nexport default function watcherSaga() {\n  return _regeneratorRuntime.wrap(function watcherSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLeading(SIGNUP_REQUESTED, submitSignup);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction submitSignup(action) {\n  var payload;\n  return _regeneratorRuntime.wrap(function submitSignup$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(apiCaller, agent.Signup.submitSignup, {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(action.payload)\n          });\n\n        case 3:\n          payload = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: SIGNUP_SUCCESS,\n            payload: payload.data\n          });\n\n        case 6:\n          _context2.next = 14;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: SIGNUP_FAILURE,\n            payload: {\n              message: 'Signup failed, please contact docudio@gmail.com if this persists after refreshing your page'\n            }\n          });\n\n        case 12:\n          _context2.next = 14;\n          return call(app.sendErrorMessage, _context2.t0);\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/api/signup/index.js"],"names":["watcherSaga","submitSignup","takeLeading","takeLatest","call","put","delay","agent","SIGNUP_REQUESTED","SIGNUP_SUCCESS","SIGNUP_FAILURE","apiCaller","app","action","Signup","headers","body","JSON","stringify","payload","type","data","message","sendErrorMessage"],"mappings":";;oDAU0BA,W;qDAIfC,Y;;AAdX,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,IAAlC,EAAwCC,GAAxC,EAA6CC,KAA7C,QAA0D,oBAA1D;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SACEC,gBADF,EAEEC,cAFF,EAGEC,cAHF,QAIO,yBAJP;AAKA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,GAAP,MAAgB,eAAhB;AAEA,eAAe,SAAWZ,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,WAAW,CAACM,gBAAD,EAAmBP,YAAnB,CAAjB;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIf,SAAWA,YAAX,CAAyBY,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoB,iBAAMT,IAAI,CAACO,SAAD,EAAYJ,KAAK,CAACO,MAAN,CAAab,YAAzB,EAAuC;AAAEc,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aAAX;AAAmDC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAM,CAACM,OAAtB;AAAzD,WAAvC,CAAV;;AAFpB;AAEUA,UAAAA,OAFV;AAAA;AAGI,iBAAMd,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAEX,cAAR;AAAwBU,YAAAA,OAAO,EAAEA,OAAO,CAACE;AAAzC,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMhB,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAEV,cAAR;AAAwBS,YAAAA,OAAO,EAAE;AAAEG,cAAAA,OAAO,EAAE;AAAX;AAAjC,WAAD,CAAT;;AALJ;AAAA;AAMI,iBAAMlB,IAAI,CAACQ,GAAG,CAACW,gBAAL,eAAV;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLeading, takeLatest, call, put, delay } from 'redux-saga/effects'\nimport agent from './agent'\nimport {\n  SIGNUP_REQUESTED,\n  SIGNUP_SUCCESS,\n  SIGNUP_FAILURE\n} from '../../../actions/signup'\nimport apiCaller from '../api-caller'\nimport app from '../../app/app'\n\nexport default function * watcherSaga () {\n  yield takeLeading(SIGNUP_REQUESTED, submitSignup)\n}\n\nfunction * submitSignup (action) {\n  try {\n    const payload = yield call(apiCaller, agent.Signup.submitSignup, { headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(action.payload) })\n    yield put({ type: SIGNUP_SUCCESS, payload: payload.data })\n  } catch (e) {\n    yield put({ type: SIGNUP_FAILURE, payload: { message: 'Signup failed, please contact docudio@gmail.com if this persists after refreshing your page' } })\n    yield call(app.sendErrorMessage, e)\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}