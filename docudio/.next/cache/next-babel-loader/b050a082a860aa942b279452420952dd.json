{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleAppLoad),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(sendErrorMessage);\n\nimport { call, put } from 'redux-saga/effects';\nimport { getAuthToken, getDarkModePreference } from '../utils';\nimport { APP_LOAD_SUCCESS, APP_LOAD_FAILURE, ADD_MESSAGE } from '../../actions';\nimport { ACCESS_TOKEN_SUCCESS } from '../../actions/auth';\nimport { THEME_LIGHT_PREFERRED, THEME_DARK_PREFERRED } from '../../actions/theme';\nimport auth from './auth';\n\nfunction handleAppLoad() {\n  var authToken, DarkModePreference;\n  return _regeneratorRuntime.wrap(function handleAppLoad$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getAuthToken);\n\n        case 3:\n          authToken = _context.sent;\n          _context.next = 6;\n          return call(getDarkModePreference);\n\n        case 6:\n          DarkModePreference = _context.sent;\n\n          if (!authToken) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 10;\n          return put({\n            type: ACCESS_TOKEN_SUCCESS\n          });\n\n        case 10:\n          _context.next = 12;\n          return call(auth.fetchUserClaims);\n\n        case 12:\n          if (!(DarkModePreference === 'true')) {\n            _context.next = 17;\n            break;\n          }\n\n          _context.next = 15;\n          return put({\n            type: THEME_DARK_PREFERRED,\n            payload: DarkModePreference\n          });\n\n        case 15:\n          _context.next = 20;\n          break;\n\n        case 17:\n          if (!(DarkModePreference === 'false')) {\n            _context.next = 20;\n            break;\n          }\n\n          _context.next = 20;\n          return put({\n            type: THEME_LIGHT_PREFERRED,\n            payload: DarkModePreference\n          });\n\n        case 20:\n          _context.next = 22;\n          return put({\n            type: APP_LOAD_SUCCESS\n          });\n\n        case 22:\n          _context.next = 28;\n          break;\n\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 28;\n          return put({\n            type: APP_LOAD_FAILURE,\n            payload: _context.t0\n          });\n\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 24]]);\n}\n\nfunction sendErrorMessage(e) {\n  return _regeneratorRuntime.wrap(function sendErrorMessage$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put({\n            type: ADD_MESSAGE,\n            payload: _objectSpread(_objectSpread({}, e), {}, {\n              options: {\n                variant: 'error'\n              }\n            })\n          });\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default {\n  sendErrorMessage: sendErrorMessage,\n  handleAppLoad: handleAppLoad\n};","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/app/app.js"],"names":["handleAppLoad","sendErrorMessage","call","put","getAuthToken","getDarkModePreference","APP_LOAD_SUCCESS","APP_LOAD_FAILURE","ADD_MESSAGE","ACCESS_TOKEN_SUCCESS","THEME_LIGHT_PREFERRED","THEME_DARK_PREFERRED","auth","authToken","DarkModePreference","type","fetchUserClaims","payload","e","options","variant"],"mappings":";;;;;;;oDAOWA,a;qDAsBAC,gB;;AA7BX,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,YAAT,EAAuBC,qBAAvB,QAAoD,UAApD;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,WAA7C,QAAgE,eAAhE;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,QAA4D,qBAA5D;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,SAAWZ,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEsB,iBAAME,IAAI,CAACE,YAAD,CAAV;;AAFtB;AAEUS,UAAAA,SAFV;AAAA;AAG+B,iBAAMX,IAAI,CAACG,qBAAD,CAAV;;AAH/B;AAGUS,UAAAA,kBAHV;;AAAA,eAKQD,SALR;AAAA;AAAA;AAAA;;AAAA;AAMM,iBAAMV,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAEN;AAAR,WAAD,CAAT;;AANN;AAAA;AAOM,iBAAMP,IAAI,CAACU,IAAI,CAACI,eAAN,CAAV;;AAPN;AAAA,gBAUQF,kBAAkB,KAAK,MAV/B;AAAA;AAAA;AAAA;;AAAA;AAWM,iBAAMX,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAEJ,oBAAR;AAA8BM,YAAAA,OAAO,EAAEH;AAAvC,WAAD,CAAT;;AAXN;AAAA;AAAA;;AAAA;AAAA,gBAYeA,kBAAkB,KAAK,OAZtC;AAAA;AAAA;AAAA;;AAAA;AAaM,iBAAMX,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAEL,qBAAR;AAA+BO,YAAAA,OAAO,EAAEH;AAAxC,WAAD,CAAT;;AAbN;AAAA;AAgBI,iBAAMX,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAET;AAAR,WAAD,CAAT;;AAhBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkBI,iBAAMH,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAER,gBAAR;AAA0BU,YAAAA,OAAO;AAAjC,WAAD,CAAT;;AAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAWhB,gBAAX,CAA6BiB,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMf,GAAG,CAAC;AAAEY,YAAAA,IAAI,EAAEP,WAAR;AAAqBS,YAAAA,OAAO,kCAAOC,CAAP;AAAUC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,OAAO,EAAE;AAAX;AAAnB;AAA5B,WAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe;AACbnB,EAAAA,gBAAgB,EAAhBA,gBADa;AAEbD,EAAAA,aAAa,EAAbA;AAFa,CAAf","sourcesContent":["import { call, put } from 'redux-saga/effects'\nimport { getAuthToken, getDarkModePreference } from '../utils'\nimport { APP_LOAD_SUCCESS, APP_LOAD_FAILURE, ADD_MESSAGE } from '../../actions'\nimport { ACCESS_TOKEN_SUCCESS } from '../../actions/auth'\nimport { THEME_LIGHT_PREFERRED, THEME_DARK_PREFERRED } from '../../actions/theme'\nimport auth from './auth'\n\nfunction * handleAppLoad () {\n  try {\n    const authToken = yield call(getAuthToken)\n    const DarkModePreference = yield call(getDarkModePreference)\n\n    if (authToken) {\n      yield put({ type: ACCESS_TOKEN_SUCCESS })\n      yield call(auth.fetchUserClaims)\n    }\n\n    if (DarkModePreference === 'true') {\n      yield put({ type: THEME_DARK_PREFERRED, payload: DarkModePreference })\n    } else if (DarkModePreference === 'false') {\n      yield put({ type: THEME_LIGHT_PREFERRED, payload: DarkModePreference })\n    }\n\n    yield put({ type: APP_LOAD_SUCCESS })\n  } catch (e) {\n    yield put({ type: APP_LOAD_FAILURE, payload: e })\n  }\n}\n\nfunction * sendErrorMessage (e) {\n  yield put({ type: ADD_MESSAGE, payload: { ...e, options: { variant: 'error' } } })\n}\n\nexport default {\n  sendErrorMessage,\n  handleAppLoad\n}\n"]},"metadata":{},"sourceType":"module"}