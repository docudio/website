{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardHeader, Avatar, Badge } from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\nimport { useSelector } from 'react-redux';\nvar useStyles = makeStyles({\n  root: {\n    flexGrow: 1\n  },\n  avatar: {\n    backgroundColor: red[500]\n  }\n});\nexport default function UserDetails() {\n  _s();\n\n  var classes = useStyles;\n  var trustedClaims = useSelector(function (state) {\n    return state.auth.trustedClaims;\n  });\n\n  if (!trustedClaims) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  return /*#__PURE__*/React.createElement(Card, {\n    variant: \"outlined\",\n    className: classes.root\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    avatar: /*#__PURE__*/React.createElement(Badge, {\n      color: \"secondary\",\n      overlap: \"circle\",\n      variant: \"dot\",\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      className: classes.avatar\n    }, \"\".concat(trustedClaims.claims.givenname ? trustedClaims.claims.givenname[0] : 'N').concat(trustedClaims.claims.sn ? trustedClaims.claims.sn[0] : 'A'))),\n    title: trustedClaims.claims ? trustedClaims.claims.cn : 'NA',\n    subheader: trustedClaims.claims ? trustedClaims.claims.uid : 'NA'\n  }));\n}\n\n_s(UserDetails, \"c+c/DylwDIYEDI5STSlpDnwNILw=\", false, function () {\n  return [useSelector];\n});\n\n_c = UserDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserDetails\");","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/utils/UserDetails.js"],"names":["React","makeStyles","Card","CardHeader","Avatar","Badge","red","useSelector","useStyles","root","flexGrow","avatar","backgroundColor","UserDetails","classes","trustedClaims","state","auth","vertical","horizontal","claims","givenname","sn","cn","uid"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,MAA3B,EAAmCC,KAAnC,QAAgD,mBAAhD;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,IAAMC,SAAS,GAAGP,UAAU,CAAE;AAC5BQ,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN,GADsB;AAI5BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,eAAe,EAAEN,GAAG,CAAC,GAAD;AADd;AAJoB,CAAF,CAA5B;AASA,eAAe,SAASO,WAAT,GAAwB;AAAA;;AACrC,MAAMC,OAAO,GAAGN,SAAhB;AACA,MAAMO,aAAa,GAAGR,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAN,CAAWF,aAAf;AAAA,GAAN,CAAjC;;AAEA,MAAI,CAACA,aAAL,EAAoB;AAClB,wBAAQ,yCAAR;AACD;;AAED,sBACE,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAC,UAAd;AAAyB,IAAA,SAAS,EAAED,OAAO,CAACL;AAA5C,kBACE,oBAAC,UAAD;AACE,IAAA,MAAM,eACJ,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAC,WAAb;AAAyB,MAAA,OAAO,EAAC,QAAjC;AAA0C,MAAA,OAAO,EAAC,KAAlD;AAAwD,MAAA,YAAY,EAAE;AACpES,QAAAA,QAAQ,EAAE,KAD0D;AAEpEC,QAAAA,UAAU,EAAE;AAFwD;AAAtE,oBAIE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAEL,OAAO,CAACH;AAA3B,iBACMI,aAAa,CAACK,MAAd,CAAqBC,SAArB,GAAiCN,aAAa,CAACK,MAAd,CAAqBC,SAArB,CAA+B,CAA/B,CAAjC,GAAqE,GAD3E,SACiFN,aAAa,CAACK,MAAd,CAAqBE,EAArB,GAA0BP,aAAa,CAACK,MAAd,CAAqBE,EAArB,CAAwB,CAAxB,CAA1B,GAAuD,GADxI,EAJF,CAFJ;AAUE,IAAA,KAAK,EAAEP,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAAd,CAAqBG,EAA5C,GAAiD,IAV1D;AAWE,IAAA,SAAS,EAAER,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAAd,CAAqBI,GAA5C,GAAkD;AAX/D,IADF,CADF;AAiBD;;GAzBuBX,W;UAEAN,W;;;KAFAM,W","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Card, CardHeader, Avatar, Badge } from '@material-ui/core'\nimport { red } from '@material-ui/core/colors'\nimport { useSelector } from 'react-redux'\n\nconst useStyles = makeStyles(({\n  root: {\n    flexGrow: 1\n  },\n  avatar: {\n    backgroundColor: red[500]\n  }\n}))\n\nexport default function UserDetails () {\n  const classes = useStyles\n  const trustedClaims = useSelector(state => state.auth.trustedClaims)\n\n  if (!trustedClaims) {\n    return (<></>)\n  }\n\n  return (\n    <Card variant='outlined' className={classes.root}>\n      <CardHeader\n        avatar={\n          <Badge color='secondary' overlap='circle' variant='dot' anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right'\n          }}>\n            <Avatar className={classes.avatar}>\n              {`${trustedClaims.claims.givenname ? trustedClaims.claims.givenname[0] : 'N'}${trustedClaims.claims.sn ? trustedClaims.claims.sn[0] : 'A'}`}\n            </Avatar>\n          </Badge>}\n        title={trustedClaims.claims ? trustedClaims.claims.cn : 'NA'}\n        subheader={trustedClaims.claims ? trustedClaims.claims.uid : 'NA'}\n      />\n    </Card>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}