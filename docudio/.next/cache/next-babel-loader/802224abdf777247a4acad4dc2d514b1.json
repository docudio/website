{"ast":null,"code":"import { requests } from '../../agent';\nvar port = process.env.port === '3001' ? '3000' : '443';\nvar protocol = process.env.port === '3001' ? 'http' : 'https';\nvar API_ROOT = protocol + '://' + process.env.hostname + ':' + port;\nvar ROOT_AUTH_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2';\nvar TRUSTED_CLAIMS_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2/tokeninfo';\nvar USER_ROOT = '/api/docudio/v1/groups/';\nvar USER_SEARCH_ROOT = '/api/docudio/v1/ldap/users'; // Used strictly for local development and reverse proxying requests\n\nvar portlocal = process.env.port === '3001' ? '3000' : '443';\nvar NGINX_API_ROOT = process.env.protocol + '//' + process.env.hostname + ':' + portlocal;\nvar AUTH_PARMS = {\n  client_id: '',\n  redirect_uri: process.env.protocol + '//' + process.env.hostname + ':' + process.env.port + '/auth',\n  code_challenge_method: 'S256',\n  response_type: 'code',\n  scope: ''\n};\nvar User = {\n  getUser: function getUser(options) {\n    return requests.get(\"\".concat(NGINX_API_ROOT).concat(USER_ROOT).concat(options.user, \"/isValid\"), options);\n  },\n  userSearch: function userSearch(options) {\n    return requests.get(\"\".concat(NGINX_API_ROOT).concat(USER_SEARCH_ROOT).concat(options.user), options);\n  }\n};\nexport default {\n  User: User\n};","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/api/users/agent.js"],"names":["requests","port","process","env","protocol","API_ROOT","hostname","ROOT_AUTH_URI","REACT_APP_APIGW","TRUSTED_CLAIMS_URI","USER_ROOT","USER_SEARCH_ROOT","portlocal","NGINX_API_ROOT","AUTH_PARMS","client_id","redirect_uri","code_challenge_method","response_type","scope","User","getUser","options","get","user","userSearch"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,KAAqB,MAArB,GAA8B,MAA9B,GAAuC,KAApD;AACA,IAAMG,QAAQ,GAAGF,OAAO,CAACC,GAAR,CAAYF,IAAZ,KAAqB,MAArB,GAA8B,MAA9B,GAAuC,OAAxD;AACA,IAAMI,QAAQ,GAAGD,QAAQ,GAAG,KAAX,GAAmBF,OAAO,CAACC,GAAR,CAAYG,QAA/B,GAA0C,GAA1C,GAAgDL,IAAjE;AACA,IAAMM,aAAa,GAAGL,OAAO,CAACC,GAAR,CAAYK,eAAZ,GAA8B,gBAApD;AACA,IAAMC,kBAAkB,GAAGP,OAAO,CAACC,GAAR,CAAYK,eAAZ,GAA8B,0BAAzD;AACA,IAAME,SAAS,GAAG,yBAAlB;AACA,IAAMC,gBAAgB,GAAG,4BAAzB,C,CACA;;AACA,IAAMC,SAAS,GAAGV,OAAO,CAACC,GAAR,CAAYF,IAAZ,KAAqB,MAArB,GAA8B,MAA9B,GAAuC,KAAzD;AACA,IAAMY,cAAc,GAAGX,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAuB,IAAvB,GAA8BF,OAAO,CAACC,GAAR,CAAYG,QAA1C,GAAqD,GAArD,GAA2DM,SAAlF;AACA,IAAME,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAE,EADM;AAEjBC,EAAAA,YAAY,EAAEd,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAuB,IAAvB,GAA8BF,OAAO,CAACC,GAAR,CAAYG,QAA1C,GAAqD,GAArD,GAA2DJ,OAAO,CAACC,GAAR,CAAYF,IAAvE,GAA8E,OAF3E;AAGjBgB,EAAAA,qBAAqB,EAAE,MAHN;AAIjBC,EAAAA,aAAa,EAAE,MAJE;AAKjBC,EAAAA,KAAK,EAAE;AALU,CAAnB;AAQA,IAAMC,IAAI,GAAG;AACXC,EAAAA,OAAO,EAAE,iBAACC,OAAD;AAAA,WAAatB,QAAQ,CAACuB,GAAT,WAAgBV,cAAhB,SAAiCH,SAAjC,SAA6CY,OAAO,CAACE,IAArD,eAAqEF,OAArE,CAAb;AAAA,GADE;AAEXG,EAAAA,UAAU,EAAE,oBAACH,OAAD;AAAA,WAAatB,QAAQ,CAACuB,GAAT,WAAgBV,cAAhB,SAAiCF,gBAAjC,SAAoDW,OAAO,CAACE,IAA5D,GAAoEF,OAApE,CAAb;AAAA;AAFD,CAAb;AAKA,eAAe;AACbF,EAAAA,IAAI,EAAJA;AADa,CAAf","sourcesContent":["import { requests } from '../../agent'\n\nconst port = process.env.port === '3001' ? '3000' : '443'\nconst protocol = process.env.port === '3001' ? 'http' : 'https'\nconst API_ROOT = protocol + '://' + process.env.hostname + ':' + port\nconst ROOT_AUTH_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2'\nconst TRUSTED_CLAIMS_URI = process.env.REACT_APP_APIGW + '/auth/oauth/v2/tokeninfo'\nconst USER_ROOT = '/api/docudio/v1/groups/'\nconst USER_SEARCH_ROOT = '/api/docudio/v1/ldap/users'\n// Used strictly for local development and reverse proxying requests\nconst portlocal = process.env.port === '3001' ? '3000' : '443'\nconst NGINX_API_ROOT = process.env.protocol + '//' + process.env.hostname + ':' + portlocal\nconst AUTH_PARMS = {\n  client_id: '',\n  redirect_uri: process.env.protocol + '//' + process.env.hostname + ':' + process.env.port + '/auth',\n  code_challenge_method: 'S256',\n  response_type: 'code',\n  scope: ''\n}\n\nconst User = {\n  getUser: (options) => requests.get(`${NGINX_API_ROOT}${USER_ROOT}${options.user}/isValid`, options),\n  userSearch: (options) => requests.get(`${NGINX_API_ROOT}${USER_SEARCH_ROOT}${options.user}`, options)\n}\n\nexport default {\n  User\n}\n"]},"metadata":{},"sourceType":"module"}