{"ast":null,"code":"import crypto from 'crypto';\n\nfunction base64URLEncode(str) {\n  return str.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction sha256(buffer) {\n  return crypto.createHash('sha256').update(buffer).digest();\n}\n\nexport var generatePkceValues = function generatePkceValues() {\n  if (getPkceValues()) {\n    return getPkceValues();\n  }\n\n  var verifier = base64URLEncode(crypto.randomBytes(32));\n  var challenge = base64URLEncode(sha256(verifier));\n  return {\n    verifier: verifier,\n    challenge: challenge\n  };\n};\n{\n  /*\n  export const getPkceValues = () => {\n   return sessionStorage.getItem('pkceValues')\n     ? JSON.parse(sessionStorage.getItem('pkceValues'))\n     : undefined\n  }\n  export const setPkceValues = pkceValues => {\n   sessionStorage.setItem('pkceValues', JSON.stringify(pkceValues))\n  }\n  export const removePkceValues = () => {\n   sessionStorage.removeItem('pkceValues')\n  }\n  */\n}\nexport var getAuthToken = function getAuthToken() {\n  return localStorage.getItem('authToken') ? JSON.parse(localStorage.getItem('authToken')) : undefined;\n};\nexport var getDarkModePreference = function getDarkModePreference() {\n  return localStorage.getItem('DarkModePreferred') ? localStorage.getItem('DarkModePreferred') : false;\n};\nexport var setDarkModePreference = function setDarkModePreference(preference) {\n  localStorage.setItem('DarkModePreferred', preference.payload);\n};\nexport var setAuthToken = function setAuthToken(token) {\n  localStorage.setItem('authToken', JSON.stringify(token));\n};\nexport var removeAuthToken = function removeAuthToken() {\n  localStorage.removeItem('authToken');\n};\nexport var getAuthorizationHeader = function getAuthorizationHeader(accessToken) {\n  return {\n    Authorization: \"Bearer \".concat(accessToken)\n  };\n};\nexport var decodeTrustedClaims = function decodeTrustedClaims(trustedClaims) {\n  var encodedTrustedClaims = trustedClaims.replace('Authorization: TrustedClaims', '').trim();\n  var decodedTrustedClaims = Buffer.from(encodedTrustedClaims, 'base64').toString();\n  return JSON.parse(decodedTrustedClaims);\n};","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/sagas/utils.js"],"names":["crypto","base64URLEncode","str","toString","replace","sha256","buffer","createHash","update","digest","generatePkceValues","getPkceValues","verifier","randomBytes","challenge","getAuthToken","localStorage","getItem","JSON","parse","undefined","getDarkModePreference","setDarkModePreference","preference","setItem","payload","setAuthToken","token","stringify","removeAuthToken","removeItem","getAuthorizationHeader","accessToken","Authorization","decodeTrustedClaims","trustedClaims","encodedTrustedClaims","trim","decodedTrustedClaims","Buffer","from"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,SAASC,eAAT,CAA0BC,GAA1B,EAA+B;AAC7B,SAAOA,GAAG,CAACC,QAAJ,CAAa,QAAb,EACJC,OADI,CACI,KADJ,EACW,GADX,EAEJA,OAFI,CAEI,KAFJ,EAEW,GAFX,EAGJA,OAHI,CAGI,IAHJ,EAGU,EAHV,CAAP;AAID;;AAED,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAON,MAAM,CAACO,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCF,MAAnC,EAA2CG,MAA3C,EAAP;AACD;;AAED,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACtC,MAAIC,aAAa,EAAjB,EAAqB;AAAE,WAAOA,aAAa,EAApB;AAAwB;;AAE/C,MAAMC,QAAQ,GAAGX,eAAe,CAACD,MAAM,CAACa,WAAP,CAAmB,EAAnB,CAAD,CAAhC;AACA,MAAMC,SAAS,GAAGb,eAAe,CAACI,MAAM,CAACO,QAAD,CAAP,CAAjC;AAEA,SAAO;AAAEA,IAAAA,QAAQ,EAARA,QAAF;AAAYE,IAAAA,SAAS,EAATA;AAAZ,GAAP;AACD,CAPM;AAQP;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEG;AACH,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAOC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACHC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADG,GAEHG,SAFJ;AAGD,CAJM;AAKP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AACzC,SAAOL,YAAY,CAACC,OAAb,CAAqB,mBAArB,IACHD,YAAY,CAACC,OAAb,CAAqB,mBAArB,CADG,GAEH,KAFJ;AAGD,CAJM;AAKP,OAAO,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,UAAD,EAAgB;AACnDP,EAAAA,YAAY,CAACQ,OAAb,CAAqB,mBAArB,EAA0CD,UAAU,CAACE,OAArD;AACD,CAFM;AAIP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AACnCX,EAAAA,YAAY,CAACQ,OAAb,CAAqB,WAArB,EAAkCN,IAAI,CAACU,SAAL,CAAeD,KAAf,CAAlC;AACD,CAFM;AAIP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnCb,EAAAA,YAAY,CAACc,UAAb,CAAwB,WAAxB;AACD,CAFM;AAIP,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,WAAW,EAAI;AACnD,SAAO;AAAEC,IAAAA,aAAa,mBAAYD,WAAZ;AAAf,GAAP;AACD,CAFM;AAIP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,aAAa,EAAI;AAClD,MAAMC,oBAAoB,GAAGD,aAAa,CAAC/B,OAAd,CAAsB,8BAAtB,EAAsD,EAAtD,EAA0DiC,IAA1D,EAA7B;AACA,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,oBAAZ,EAAkC,QAAlC,EAA4CjC,QAA5C,EAA7B;AACA,SAAOe,IAAI,CAACC,KAAL,CAAWmB,oBAAX,CAAP;AACD,CAJM","sourcesContent":["import crypto from 'crypto'\n\nfunction base64URLEncode (str) {\n  return str.toString('base64')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '')\n}\n\nfunction sha256 (buffer) {\n  return crypto.createHash('sha256').update(buffer).digest()\n}\n\nexport const generatePkceValues = () => {\n  if (getPkceValues()) { return getPkceValues() }\n\n  const verifier = base64URLEncode(crypto.randomBytes(32))\n  const challenge = base64URLEncode(sha256(verifier))\n\n  return { verifier, challenge }\n}\n{/*\nexport const getPkceValues = () => {\n  return sessionStorage.getItem('pkceValues')\n    ? JSON.parse(sessionStorage.getItem('pkceValues'))\n    : undefined\n}\n\nexport const setPkceValues = pkceValues => {\n  sessionStorage.setItem('pkceValues', JSON.stringify(pkceValues))\n}\n\nexport const removePkceValues = () => {\n  sessionStorage.removeItem('pkceValues')\n}\n*/}\nexport const getAuthToken = () => {\n  return localStorage.getItem('authToken')\n    ? JSON.parse(localStorage.getItem('authToken'))\n    : undefined\n}\nexport const getDarkModePreference = () => {\n  return localStorage.getItem('DarkModePreferred')\n    ? localStorage.getItem('DarkModePreferred')\n    : false\n}\nexport const setDarkModePreference = (preference) => {\n  localStorage.setItem('DarkModePreferred', preference.payload)\n}\n\nexport const setAuthToken = token => {\n  localStorage.setItem('authToken', JSON.stringify(token))\n}\n\nexport const removeAuthToken = () => {\n  localStorage.removeItem('authToken')\n}\n\nexport const getAuthorizationHeader = accessToken => {\n  return { Authorization: `Bearer ${accessToken}` }\n}\n\nexport const decodeTrustedClaims = trustedClaims => {\n  const encodedTrustedClaims = trustedClaims.replace('Authorization: TrustedClaims', '').trim()\n  const decodedTrustedClaims = Buffer.from(encodedTrustedClaims, 'base64').toString()\n  return JSON.parse(decodedTrustedClaims)\n}\n"]},"metadata":{},"sourceType":"module"}