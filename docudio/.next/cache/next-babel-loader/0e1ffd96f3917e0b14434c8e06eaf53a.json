{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { MakeStore, createWrapper, Context } from 'next-redux-wrapper';\nimport combineReducers from '../reducers/reducer';\nimport { createStore, applyMiddleware, compose, Store } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas/root-saga';\nimport '../utils/index.css';\nimport apm from '../utils/rum';\nimport '../utils/App.css';\nimport Head from 'next/head';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { wrapper } from '../store';\n\nfunction WrappedApp(props) {\n  _s();\n\n  var Component = props.Component,\n      pageProps = props.pageProps;\n  var ThemePreference = useSelector(function (state) {\n    return state.theme.preferred;\n  });\n  var theme = React.useMemo(function () {\n    return createMuiTheme({\n      palette: {\n        type: ThemePreference === true ? 'dark' : 'light',\n        primary: {\n          main: '#000000'\n        },\n        secondary: {\n          main: '#dbdbdb'\n        }\n      },\n      typography: {\n        fontFamily: ['Montserrat'].join(',')\n      }\n    });\n  }, [ThemePreference]);\n  React.useEffect(function () {\n    // Remove the server-side injected CSS.\n    var jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n  theme.typography.subtitle1 = {\n    'font-family': ['Hammersmith One', 'sans-serif']\n  };\n  theme.typography.subtitle2 = {\n    'font-family': ['Hammersmith One', 'sans-serif']\n  };\n  var notistackRef = /*#__PURE__*/React.createRef();\n\n  var onClickDismiss = function onClickDismiss(key) {\n    return function () {\n      notistackRef.current.closeSnackbar(key);\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Head, null, /*#__PURE__*/React.createElement(\"title\", null, \"My page\"), /*#__PURE__*/React.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n  })), /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(Component, pageProps)));\n}\n\n_s(WrappedApp, \"QxIo/A+pSb7xWZ/8mxSCdj3yrc4=\", false, function () {\n  return [useSelector];\n});\n\n_c = WrappedApp;\nexport default _c2 = wrapper.withRedux(WrappedApp); // makeStore function that returns a new store for every request\n\napm.setInitialPageLoadName('Docudio Landing Page');\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WrappedApp\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/mkeffele/git_repos/website/docudio/pages/_app.js"],"names":["React","MakeStore","createWrapper","Context","combineReducers","createStore","applyMiddleware","compose","Store","createSagaMiddleware","rootSaga","apm","Head","ThemeProvider","createMuiTheme","useSelector","wrapper","WrappedApp","props","Component","pageProps","ThemePreference","state","theme","preferred","useMemo","palette","type","primary","main","secondary","typography","fontFamily","join","useEffect","jssStyles","document","querySelector","parentElement","removeChild","subtitle1","subtitle2","notistackRef","createRef","onClickDismiss","key","current","closeSnackbar","withRedux","setInitialPageLoadName"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,OAAnC,QAAkD,oBAAlD;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,EAAgDC,KAAhD,QAA6D,OAA7D;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,OAAO,oBAAP;AAEA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAO,kBAAP;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,0BAA9C;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,OAAT,QAAwB,UAAxB;;AAEA,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAAA,MAClBC,SADkB,GACOD,KADP,CAClBC,SADkB;AAAA,MACPC,SADO,GACOF,KADP,CACPE,SADO;AAE1B,MAAMC,eAAe,GAAGN,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACC,KAAN,CAAYC,SAAhB;AAAA,GAAN,CAAnC;AACA,MAAMD,KAAK,GAAGvB,KAAK,CAACyB,OAAN,CACZ;AAAA,WACEX,cAAc,CAAC;AACbY,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAEN,eAAe,KAAK,IAApB,GAA2B,MAA3B,GAAoC,OADnC;AAEPO,QAAAA,OAAO,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAFF;AAGPC,QAAAA,SAAS,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAHJ,OADI;AAMbE,MAAAA,UAAU,EAAE;AAAEC,QAAAA,UAAU,EAAE,CAAC,YAAD,EAAeC,IAAf,CAAoB,GAApB;AAAd;AANC,KAAD,CADhB;AAAA,GADY,EAWZ,CAACZ,eAAD,CAXY,CAAd;AAcArB,EAAAA,KAAK,CAACkC,SAAN,CAAgB,YAAM;AACtB;AACE,QAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAlB;;AACA,QAAIF,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACG,aAAV,CAAwBC,WAAxB,CAAoCJ,SAApC;AACD;AACF,GAND,EAMG,EANH;AAQAZ,EAAAA,KAAK,CAACQ,UAAN,CAAiBS,SAAjB,GAA6B;AAAE,mBAAe,CAAC,iBAAD,EAAoB,YAApB;AAAjB,GAA7B;AACAjB,EAAAA,KAAK,CAACQ,UAAN,CAAiBU,SAAjB,GAA6B;AAAE,mBAAe,CAAC,iBAAD,EAAoB,YAApB;AAAjB,GAA7B;AAEA,MAAMC,YAAY,gBAAG1C,KAAK,CAAC2C,SAAN,EAArB;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,GAAG;AAAA,WAAI,YAAM;AAClCH,MAAAA,YAAY,CAACI,OAAb,CAAqBC,aAArB,CAAmCF,GAAnC;AACD,KAFyB;AAAA,GAA1B;;AAIA,sBACE,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,IAAD,qBACE,6CADF,eAEE;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAC;AAA9B,IAFF,CADF,eAKE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEtB;AAAtB,kBAEE,oBAAC,SAAD,EAAeH,SAAf,CAFF,CALF,CADF;AAYD;;GA7CQH,U;UAEiBF,W;;;KAFjBE,U;AA+CT,qBAAeD,OAAO,CAACgC,SAAR,CAAkB/B,UAAlB,CAAf,C,CAEA;;AACAN,GAAG,CAACsC,sBAAJ,CAA2B,sBAA3B","sourcesContent":["import React from 'react'\nimport { MakeStore, createWrapper, Context } from 'next-redux-wrapper'\nimport combineReducers from '../reducers/reducer'\nimport { createStore, applyMiddleware, compose, Store } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from '../sagas/root-saga'\n\nimport '../utils/index.css'\n\nimport apm from '../utils/rum'\nimport '../utils/App.css'\nimport Head from 'next/head'\n\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\n\nimport { useSelector } from 'react-redux'\n\nimport { wrapper } from '../store'\n\nfunction WrappedApp (props) {\n  const { Component, pageProps } = props\n  const ThemePreference = useSelector(state => state.theme.preferred)\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: ThemePreference === true ? 'dark' : 'light',\n          primary: { main: '#000000' },\n          secondary: { main: '#dbdbdb' }\n        },\n        typography: { fontFamily: ['Montserrat'].join(',') }\n\n      }),\n    [ThemePreference]\n  )\n\n  React.useEffect(() => {\n  // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side')\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles)\n    }\n  }, [])\n\n  theme.typography.subtitle1 = { 'font-family': ['Hammersmith One', 'sans-serif'] }\n  theme.typography.subtitle2 = { 'font-family': ['Hammersmith One', 'sans-serif'] }\n\n  const notistackRef = React.createRef()\n  const onClickDismiss = key => () => {\n    notistackRef.current.closeSnackbar(key)\n  }\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title>My page</title>\n        <meta name='viewport' content='minimum-scale=1, initial-scale=1, width=device-width' />\n      </Head>\n      <ThemeProvider theme={theme}>\n\n        <Component {...pageProps} />\n      </ThemeProvider>\n    </React.Fragment>\n  )\n}\n\nexport default wrapper.withRedux(WrappedApp)\n\n// makeStore function that returns a new store for every request\napm.setInitialPageLoadName('Docudio Landing Page')\n"]},"metadata":{},"sourceType":"module"}